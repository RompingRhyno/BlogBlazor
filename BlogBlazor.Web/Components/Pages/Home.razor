@page "/"
@rendermode InteractiveServer
@inject ArticleApiClient ArticleApi
@using BlogLibrary.Models

<PageTitle>Articles</PageTitle>

<h1>Latest Articles</h1>

@if (articles == null)
{
    <p>Loading articles...</p>
}
else if (!articles.Any())
{
    <p>No articles available.</p>
}
else
{
    <div class="row">
        @foreach (var article in articles)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@article.Title</h5>
                        <p class="card-text">
                            <strong>@(article.ContributorUsername ?? "Unknown Author")</strong>,
                            @article.StartDate?.ToString("MMMM dd, yyyy")
                        </p>
                        <p class="card-text">
                            @if (!string.IsNullOrEmpty(article.Body) && article.Body.Length > 100)
                            {
                                @($"{article.Body.Substring(0, 100)}...")
                                <NavLink href="@($"/article/{article.ArticleId}")">Read More</NavLink>
                            }
                            else
                            {
                                @article.Body
                            }
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Article>? articles;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            articles = (await ArticleApi.GetArticlesAsync(10)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching articles: {ex.Message}");
        }
    }
}