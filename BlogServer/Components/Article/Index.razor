@page "/"
@using BlogLibrary.Models
@using BlogServer.Services
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer

@inject UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="Contributor,Admin">
    <Authorized>
        <button @onclick="CreateArticle" class="btn btn-primary mb-3">Create Article</button>
    </Authorized>
</AuthorizeView>

<h2 class="text-center mb-4">Latest Articles</h2>

@if (articles == null)
{
    <p>Loading articles...</p>
}
else if (!articles.Any())
{
    <p>No articles found.</p>
}
else
{
    <div class="row">
        @foreach (var article in articles)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@article.Title</h5>
                        <p class="card-text">
                            <strong>
                                @if (article.Contributor != null)
                                {
                                    @($"{article.Contributor.FirstName} {article.Contributor.LastName}")
                                }
                                else
                                {
                                    @article.ContributorUsername
                                }
                            </strong>, @article.CreateDate?.ToString("MMMM dd, yyyy")
                        </p>
                        
                        <p class="card-text">
                            @if (!string.IsNullOrEmpty(article.Body))
                            {
                                @if (article.Body.Length > 100)
                                {
                                    @((MarkupString)article.Body.Substring(0, 100)) <span>...</span>
                                    <a href="/article/details/@article.ArticleId">more...</a>
                                }
                                else
                                {
                                    @((MarkupString)article.Body)
                                }
                            }
                        </p>
                        
                        <div class="d-flex justify-content-end">
                            <AuthorizeView>
                                <Authorized Context="authContext">
                                    @{
                                        var isAdmin = authContext.User.IsInRole("Admin");
                                        var isOwner = authContext.User.Identity?.Name == article.ContributorUsername;
                                        var showActions = isAdmin || (authContext.User.IsInRole("Contributor") && isOwner);
                                    }
                                    @if (showActions)
                                    {
                                        <button @onclick="@(() => EditArticle(article.ArticleId))" 
                                                class="btn btn-warning btn-sm me-3">Edit</button>

                                        <button @onclick="@(async () => await DeleteArticle(article.ArticleId))" 
                                                class="btn btn-danger btn-sm">Delete</button>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Article>? articles;
    private string? currentUsername;

    protected override async Task OnInitializedAsync()
    {
        articles = await UserService.GetAllArticlesAsync();
        currentUsername = await UserService.GetCurrentUsername();
    }

    private void CreateArticle()
    {
        NavigationManager.NavigateTo("/article/create");
    }

    private void EditArticle(int articleId)
    {
        NavigationManager.NavigateTo($"/article/edit/{articleId}");
    }

    private async Task DeleteArticle(int articleId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this article? This action cannot be undone."))
        {
            var success = await UserService.DeleteArticleAsync(articleId);
            if (success)
            {
                articles = await UserService.GetAllArticlesAsync();
            }
        }
    }
}