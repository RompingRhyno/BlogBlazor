@page "/admin/manageUsers"
@using BlogServer.Services
@using BlogLibrary.Models

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

@inject AdminService adminService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Manage Users</h1>

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading user data...</p>
    </div>
}
else if (userRoles == null || !userRoles.Any())
{
    <p>No users found</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User Name</th>
                <th>Roles</th>
                <th>Contributor Role</th>
                <th></th>
                <th>Actions</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in userRoles)
            {
                <tr>
                    <td>@item.UserName</td>
                    <td>
                        @if (item.Roles != null)
                        {
                            @foreach (var role in item.Roles)
                            {
                                <span>@role</span><br />
                            }
                        }
                    </td>
                    <td>
                        <!-- Checkbox for Contributor role -->
                        <input type="checkbox" 
                            checked="@(item.Roles?.Contains("Contributor") ?? false)"
                            @onchange="@(async () => await UpdateRoleAsync(item.UserName!, !(item.Roles?.Contains("Contributor") ?? false)))" />                    
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="@(() => EditUser(item.UserName!))">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-success btn-sm" @onclick="@(() => ViewDetails(item.UserName!))">Details</button>
                    </td>
                    <td>
                        <!-- Only show Ban button if the user is not an Admin -->
                        @if (item.Roles != null && !item.Roles.Contains("Admin"))
                        {
                            <button class="btn btn-danger btn-sm" @onclick="@(() => ConfirmBan(item.UserName!))">Ban</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserRoleViewModel>? userRoles;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUsers();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load users: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        StateHasChanged();
        try
        {
            userRoles = await adminService.GetAllUserRolesAsync(); // Call service method  
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateRoleAsync(string userName, bool isContributor)
    {
        try {
            var success = await adminService.UpdateRolesAsync(userName, isContributor);        
            if (!success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update role");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void EditUser(string userName)
    {
        NavigationManager.NavigateTo($"/admin/editUser/{userName}");
    }

    private void ViewDetails(string userName)
    {
        NavigationManager.NavigateTo($"/admin/userDetails/{userName}");
    }

    private async Task ConfirmBan(string userName)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to ban {userName}?"))
        {
            await BanUser(userName);
        }
    }

    private async Task BanUser(string userName)
    {
        bool success = await adminService.BanUserAsync(userName);
        if (!success)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to ban this user.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Successfully banned this user.");
        }
        await LoadUsers(); // Refresh user list after banning
    }
}
